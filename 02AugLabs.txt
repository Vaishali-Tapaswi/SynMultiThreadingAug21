Lab 9 - Modify Lab1 file 
        Lab2.java -> with synchronized block
        Lab3.java -> 	List<String> list = 	Collections.synchronizedList(new ArrayList<String>());
        
Lab 8 - Create a new project Demo3
        Lab1.java -> 
            Create three threads to add items(100) in the list 
                Show list size after all three threads complete execution
                1. Thread Group
                2. in main thread in while loop 
                    show list size when active count changes
                    import java.util.ArrayList;
                import java.util.List;

                /*
                 *         Lab1.java -> 
                                Show list size after all three threads complete execution

                 */
                class Lab1Helper implements Runnable {
                        private List<String> list;

                        public Lab1Helper(List<String> list) {
                                this.list = list;
                        }

                        @Override
                        public void run() {
                                for (int i = 1; i <= 100; i++) {
                                        list.add(Thread.currentThread().getName() + "" + i);
                                }

                        }
                }

                public class Lab1 {
                        public static void main(String[] args) throws InterruptedException {
                                ThreadGroup group = new ThreadGroup("work");
                                List<String> list = new ArrayList<String>();
                                for (int i = 1; i <= 3; i++) {
                                        Thread t1 = new Thread(group, new Lab1Helper(list));
                                        t1.start();
                                }
                                int count = group.activeCount();
                                System.out.println("Threads Started "+ count);

                                while (group.activeCount() > 0) {
                                //	if (count != group.activeCount()) {
                                                System.out.println("Current ActiveCount is " + count + " and list size is " + list.size());
                                //	}
                                        Thread.sleep(1);
                                }
                                System.out.println("Current ActiveCount is " + count + " and list size is " + list.size());
                        }
                }


-------------------------------------------------
Lab 7 - 
    Demo1
        Understand Thread priority (multiple\Lab3)
        ui.NoThread
        ui.Thread
        ui.ThreadPriorty
    Demo2 
        Lab1 - daemon thread
        Lab2 - Thread Group
-------------------------------------------------    
Lab 6 - Start 3 threads and stop and show the message of which thread completes its executions
    Dice game / on 3 place to visit-> choose 1 from these three
    package conc;

    import java.util.Scanner;

    class Lab2Helper implements Runnable {
        static boolean flag = true;
        String str;

        public Lab2Helper(String str) {
            this.str = str;
        }

        @Override
        public void run() {
            for (int i = 1; i <= 10; i++) {
                try {
                    Thread.sleep((long) (Math.random() * 1000));
                } catch (InterruptedException e) {
                }
                if (flag == true) {
                    System.out.println(str + i);
                    Lab2.location = str;
                    if (i == 10)
                        flag = false;
                } else {
                    break;
                }
            }       }    }

    public class Lab2 {
        static String location = "";

        public static void main(String[] args) {
            Thread t1 = new Thread(new Lab2Helper("Shimla"));
            Thread t2 = new Thread(new Lab2Helper("Manali"));
            Thread t3 = new Thread(new Lab2Helper("Kulu"));
            t1.start();
            t2.start();
            t3.start();
            try {
                t1.join();
                t2.join();
                t3.join();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            System.out.println("Your Choice of  Location = " + location);
        }
    }

Lab 5 - Create class conc.Lab1
    package conc;

    import java.util.Scanner;

    class Lab1Helper implements Runnable{
        String str;
        public Lab1Helper(String str) {
            this.str = str;
        }
        @Override
        public void run() {
            for(int i = 0;i< 9999999;i++) {
                //try { Thread.sleep(500); } catch (InterruptedException e) { }
                System.out.print(str);
            }
        }
    }
    public class Lab1 {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Please enter a number to continue");
            scanner.nextInt();

            Thread t1 = new Thread(new Lab1Helper("-"));
            Thread t2 = new Thread(new Lab1Helper("+"));
            Thread t3 = new Thread(new Lab1Helper("x"));
            t1.start();
            // main + t1 -> time slicing
            t2.start();
            // main, t1, t2
            t3.start();
            // main, t1,t2, t3
        }
    }

Comment/uncomment sleep block and check time slicing (on cmd prompt / jvisualvm/jconsole)

---------------------------------------------------------------------------------------
Create new java project (Demo1)
Lab 1 
    Create a new class basicdemo.Lab1
      write main method
        Scanner scanner = new Scanner(System.in);
        System.out.println("Press a number to continue");
        scanner.nextInt();
      run the class
   on cmd prompt(set path=c:\jdk\bin)
    jvisualvm
    on left side, click on Lab1 and observe threads
Lab 2 
  Create class basicdemo.Lab2
    package basicdemo;

    import java.util.Scanner;

    class Thread1 extends Thread{
      @Override
      public void run() {
        System.out.println("Current Thread is " + this.getName());
        for (int i = 0; i< 999900;i++) {
          System.out.print(i +"\t");
        }
      }
    }
    public class Lab2 {

      public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please enter a number to continue");
        scanner.nextInt();
        System.out.println("Current Code in main with thread " + Thread.currentThread().getName());
          Thread t1 = new Thread1();
          t1.start();

      }

    }
  Run and observe using jvisualvm
Lab 3 (copy of lab2.java)
  Change Thread1 to Thread2 and modify extends Thread to implements Runnable
  
Lab 4 - Create thread using Java 8
