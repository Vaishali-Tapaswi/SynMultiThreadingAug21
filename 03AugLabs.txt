Lab 7 - create Lab2.java
	Main
		accept input -> number
			start those many threads
			and then after 50% threads get over -> show 50% over...
		
Lab 6 - 
package threadinteraction;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Lab1Helper implements Runnable {
	String str;
	CountDownLatch latch;

	public Lab1Helper(String str, CountDownLatch latch) {
		this.str = str;
		this.latch = latch;
	}

	@Override
	public void run() {
		for (int i = 1; i <= 10; i++) {
			try {
				Thread.sleep((long) (Math.random() * 1000));
			} catch (InterruptedException e) {
			}
			if (latch.getCount() > 0) {
				System.out.println(str + i);
				Lab1.location = str;
			} else {
				break;
			}
		}
		latch.countDown();
	}
}

public class Lab1 {
	static String location = "";

	public static void main(String[] args) throws InterruptedException {
		ExecutorService service = Executors.newFixedThreadPool(3);
		CountDownLatch latch =new CountDownLatch(1);
		service.execute(new Lab1Helper("Shimla",latch));
		service.execute(new Lab1Helper("Manali",latch));
		service.execute(new Lab1Helper("Kulu",latch));
		
		latch.await();
		System.out.println("Your Choice of  Location = " + location);
		service.shutdown();
	}
}


Lab 5 - Schedule
	package exec;

	import java.util.Date;
	import java.util.concurrent.Executors;
	import java.util.concurrent.ScheduledExecutorService;
	import java.util.concurrent.TimeUnit;

	class Lab5Helper implements Runnable{
		@Override
		public void run() {
			System.out.println(Thread.currentThread().getName() + " : "  + new Date());
			}
		}

	public class Lab5 {
		public static void main(String[] args) {
			ScheduledExecutorService service = Executors.newScheduledThreadPool(2);
	//		service.schedule(new Lab5Helper(), 5, TimeUnit.SECONDS);
		//	service.scheduleAtFixedRate(new Lab5Helper(),5,1,TimeUnit.SECONDS);
			service.scheduleWithFixedDelay(new Lab5Helper(),5,1,TimeUnit.SECONDS);
		}
	}

	Schedule -> 1 time call
	FixRate -> difference in method calls
	FixDelay -> time after method execution is complete
Lab 4 - Callable
	class Lab4Helper implements Callable<Integer>{
	private int no1;
	private int no2;
	
	public Lab4Helper(int no1, int no2) {
		this.no1 = no1;
		this.no2 = no2;
	}
	@Override
	public Integer call() throws Exception {
		System.out.println("Call invoked in Thread " + Thread.currentThread().getName() + " with " + no1 + ", " + no2);
		try{Thread.sleep(400);}catch(Exception e) {}
		return no1+no2;
	}
	}
	
	modify main method to invoke 
		ExecutorService service = Executors.newFixedThreadPool(2);
		Future<Integer>[] arr = new Future[10];
		for (int  i=1;i<=10;i++) {
			arr[i-1] = service.submit(new Lab4Helper(i+1, i*2));
		}
		
		System.out.println(".....");
		for (int  i=1;i<=10;i++) { 
			System.out.println("Ans = " + arr[i-1].get());
		}
		}

Lab 3 - 
	ExecutorService service = Executors.newCachedThreadPool();
	    for (int i =0; i< 100;i++) {
		  service.execute(new Lab31Helper()); 
		  service.execute(new Lab32Helper()); 
		  service.execute(new Lab31Helper()); 
		}

Lab2 - same as Lab1
	ExecutorService service = Executors.newFixedThreadPool(3);
	Start the same task thrice and see thread names
	Create one more class with runnable
		and on some condiction throw RuntimeException
		monitor in jvisualvm / console
			new thread created as soon as first gives error(fails)
	
--------------------
Lab 1 - create new project demo4. 
    modify following code with executor service
        import java.util.Scanner;

        class Lab3Helper implements Runnable{

          @Override
          public void run() {
            System.out.println("Current Thread is " + Thread.currentThread().getName());
            for (int i = 0; i< 900;i++) {
              System.out.print(i +"\t");
            }
          }
        }
        public class Lab3 {

          public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Please enter a number to continue");
            scanner.nextInt();
            System.out.println("Current Code in main with thread " + Thread.currentThread().getName());
              Thread t1 = new Thread(new Lab3Helper());
              t1.setName("HelperThread");
              t1.start();
          }

        }


    
    ExecutorService service = Executors.newSingleThreadExecutor();
		service.execute(new Lab1Helper());
	
